// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package payload

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF83482 = 1
	codecSelferCcRAW3482  = 255
	// ----- value types used ----
	codecSelferValueTypeArray3482     = 10
	codecSelferValueTypeMap3482       = 9
	codecSelferValueTypeString3482    = 6
	codecSelferValueTypeInt3482       = 2
	codecSelferValueTypeUint3482      = 3
	codecSelferValueTypeFloat3482     = 4
	codecSelferValueTypeNil3482       = 1
	codecSelferBitsize3482            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil3482 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct3482 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer3482 struct{}

func codecSelfer3482False() bool { return false }

func init() {
	if codec1978.GenVersion != 16 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic("codecgen version mismatch: current: 16, need " + ver + ". Re-generate file: " + file)
	}
}

func (x *Payload) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer3482
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		var yyq2 = [7]bool{     // should field at this index be written?
			true,          // CorrelationID
			true,          // OriginTimestamp
			x.IsSynthetic, // IsSynthetic
			true,          // ApplicationID
			true,          // APIVersion
			true,          // EventHeader
			true,          // EventBody
		}
		_ = yyq2
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(7)
			z.EncWriteArrayElem()
			r.EncodeString(string(x.CorrelationID))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.OriginTimestamp))
			z.EncWriteArrayElem()
			if yyq2[2] {
				r.EncodeBool(bool(x.IsSynthetic))
			} else {
				r.EncodeBool(false)
			}
			z.EncWriteArrayElem()
			r.EncodeString(string(x.ApplicationID))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.APIVersion))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.EventHeader))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.EventBody))
			z.EncWriteArrayEnd()
		} else {
			var yynn2 int
			for _, b := range yyq2 {
				if b {
					yynn2++
				}
			}
			z.EncWriteMapStart(yynn2)
			yynn2 = 0
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"CorrelationID\"")
			} else {
				r.EncodeString(`CorrelationID`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.CorrelationID))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"OriginTimestamp\"")
			} else {
				r.EncodeString(`OriginTimestamp`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.OriginTimestamp))
			if yyq2[2] {
				z.EncWriteMapElemKey()
				if z.IsJSONHandle() {
					z.WriteStr("\"IsSynthetic\"")
				} else {
					r.EncodeString(`IsSynthetic`)
				}
				z.EncWriteMapElemValue()
				r.EncodeBool(bool(x.IsSynthetic))
			}
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ApplicationID\"")
			} else {
				r.EncodeString(`ApplicationID`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.ApplicationID))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"apiVersion\"")
			} else {
				r.EncodeString(`apiVersion`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.APIVersion))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"EventHeader\"")
			} else {
				r.EncodeString(`EventHeader`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.EventHeader))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"EventBody\"")
			} else {
				r.EncodeString(`EventBody`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.EventBody))
			z.EncWriteMapEnd()
		}
	}
}

func (x *Payload) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer3482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil3482 {
		*(x) = Payload{}
	} else if yyct2 == codecSelferValueTypeMap3482 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray3482 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct3482)
	}
}

func (x *Payload) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer3482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "CorrelationID":
			x.CorrelationID = (string)(string(r.DecodeStringAsBytes()))
		case "OriginTimestamp":
			x.OriginTimestamp = (string)(string(r.DecodeStringAsBytes()))
		case "IsSynthetic":
			x.IsSynthetic = (bool)(r.DecodeBool())
		case "ApplicationID":
			x.ApplicationID = (string)(string(r.DecodeStringAsBytes()))
		case "apiVersion":
			x.APIVersion = (string)(string(r.DecodeStringAsBytes()))
		case "EventHeader":
			x.EventHeader = (string)(string(r.DecodeStringAsBytes()))
		case "EventBody":
			x.EventBody = (string)(string(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Payload) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer3482
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.CorrelationID = (string)(string(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.OriginTimestamp = (string)(string(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.IsSynthetic = (bool)(r.DecodeBool())
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ApplicationID = (string)(string(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.APIVersion = (string)(string(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.EventHeader = (string)(string(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.EventBody = (string)(string(r.DecodeStringAsBytes()))
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = z.DecCheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
}
